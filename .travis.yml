## Documentation: http://docs.travis-ci.com/user/languages/julia/
language: julia
os:
  - linux
  # We don't have docker on OSX on travis at the moment...
  #- osx
julia:
  - 1.0
 #- nightly
notifications:
  email: false
git:
  depth: 99999999
sudo: required

matrix:
  allow_failures:
    - julia: nightly

env:
  global:
    - BINARYBUILDER_AUTOMATIC_APPLE=true
    - BINARYBUILDER_FULL_SHARD_TEST=false
cache:
  directories:
    - deps/downloads

jobs:
  include:
    # Test with squashfs, also doing a full shard test
    - julia: 1.0
      env:
        - BINARYBUILDER_USE_SQUASHFS=true
        - BINARYBUILDER_FULL_SHARD_TEST=true

    # Add a job that uses squashfs and also runs the package tests
    - julia: 1.0
      env:
        - BINARYBUILDER_USER_SQUASHFS=true
        - BINARYBUILDER_PACKAGE_TESTS=true
    
    # Add a job that doesn't use the squashfs but otherwise does normal tests
    # We don't have the disk space available to do a full shard test here.
    - julia: 1.0
      env:
        - BINARYBUILDER_USE_SQUASHFS=false

    # Add a job that uses the privileged builder
    - julia: 1.0
      env:
        - BINARYBUILDER_RUNNER=privileged

    # Add a job that uses the docker builder
    - julia: 1.0
      env:
        - BINARYBUILDER_RUNNER=docker

    # Add a test job that builds a new version of the sandbox and runs tests with that.
    - stage: test
      julia: 1.0
      env:
        - BINARYBUILDER_USE_SQUASHFS=false
        - BINARYBUILDER_SANDBOX_PATH=/tmp/sandbox
        - TEST_SANDBOX=true

script:
   - julia -e 'Pkg.clone(pwd())'
   - julia -e 'Pkg.build("BinaryBuilder")'
   - if [ ${TEST_SANDBOX:-false} = true ]; then
         julia -e 'cd(Pkg.dir("BinaryBuilder","deps")); run(`gcc -std=c99 -o /tmp/sandbox sandbox.c`)';
     fi
   - julia -e 'Pkg.checkout("BinaryProvider", "master")'
   - julia --color=yes --check-bounds=yes -e 'Pkg.test("BinaryBuilder", coverage=true)'

# Ironic.  He could provide binaries for others but not himself...
addons:
  apt:
    packages:
      - curl
      - wget
      - p7zip-full
      - tar
      - gzip

after_success:
  # push coverage results to Codecov
  - julia -e 'cd(Pkg.dir("BinaryBuilder")); Pkg.add("Coverage"); using Coverage; Codecov.submit(Codecov.process_folder())'
  # Build docs
  - julia -e 'Pkg.add("Documenter")'
  - julia -e 'cd(Pkg.dir("BinaryBuilder")); include(joinpath("docs", "make.jl"))'
