export build_tarballs, autobuild, print_artifacts_toml, build, get_meta_json
import GitHub: gh_get_json, DEFAULT_API
import SHA: sha256, sha1
using Pkg.TOML, Dates, UUIDs
using RegistryTools, Registrator
import LibGit2
import PkgLicenses

const BUILD_HELP = (
    """
    Usage: build_tarballs.jl [target1,target2,...] [--help]
                             [--verbose] [--debug]
                             [--deploy] [--deploy-bin] [--deploy-jll]
                             [--register] [--meta-json]

    Options:
        targets             By default `build_tarballs.jl` will build a tarball
                            for every target within the `platforms` variable.
                            To override this, pass in a list of comma-separated
                            target triplets for each target to be built.  Note
                            that this can be used to build for platforms that
                            are not listed in the 'default list' of platforms
                            in the build_tarballs.jl script.

        --verbose           This streams compiler output to stdout during the
                            build which can be very helpful for finding bugs.
                            Note that it is colorized if you pass the
                            --color=yes option to julia, see examples below.

        --debug             This causes a failed build to drop into an
                            interactive shell for debugging purposes.

        --deploy=<repo>     Deploy binaries and JLL wrapper code to a github
                            release of an autogenerated repository.  Uses
                            `github.com/JuliaBinaryWrappers/<name>_jll.jl` by
                            default, unless `<repo>` is set, in which case it
                            should be set as `<owner>/<name>_jll.jl`.  Setting
                            this option is equivalent to setting `--deploy-bin`
                            and `--deploy-jll`.  If `<repo>` is set to "local"
                            then nothing will be uploaded, but JLL packages
                            will still be written out to `~/.julia/dev/`.

        --deploy-bin=<repo> Deploy just the built binaries

        --deploy-jll=<repo> Deploy just the JLL code wrappers

        --register=<depot>  Register into the given depot.  If no path is
                            given, defaults to `~/.julia`.  Registration
                            requires deployment of the JLL wrapper code, so
                            so using `--register` without `--deploy` or the
                            more specific `--deploy-jll` is an error.

        --meta-json         Output a JSON representation of the given build
                            instead of actually building.  Note that this can
                            (and often does) output multiple JSON objects for
                            multiple platforms, multi-stage builds, etc...

        --help              Print out this message.

    Examples:
        julia --color=yes build_tarballs.jl --verbose
            This builds all tarballs, with colorized output.

        julia build_tarballs.jl x86_64-linux-gnu,i686-linux-gnu
            This builds two tarballs for the two platforms given, with a
            minimum of output messages.
    """
)

"""
    build_tarballs(ARGS, src_name, src_version, sources, script, platforms,
                   products, dependencies; kwargs...)

This should be the top-level function called from a `build_tarballs.jl` file.
It takes in the information baked into a `build_tarballs.jl` file such as the
`sources` to download, the `products` to build, etc... and will automatically
download, build and package the tarballs, generating a `build.jl` file when
appropriate.

Generally, `ARGS` should be the top-level Julia `ARGS` command-line arguments
object.  `build_tarballs` does some rudimentary parsing of the arguments. To
see what it can do, you can call it with `--help` in the `ARGS` or see the
[Command Line](@ref) section in the manual.

The `kwargs` are passed on to [`autobuild`](@ref), see there for a list of
supported ones. A few additional keyword arguments are accept:

* `lazy_artifacts` sets whether the artifacts should be lazy.

* `init_block` may be set to a string containing Julia code; if present, this
  code will be inserted into the initialization path of the generated JLL
  package. This can for example be used to invoke an initialization API of a
  shared library.

!!! note

    The `init_block` keyword argument is experimental and may be removed
    in a future version of this package. Please use it sparingly.
"""
function build_tarballs(ARGS, src_name, src_version, sources, script,
                        platforms, products, dependencies; kwargs...)
    @nospecialize
    # See if someone has passed in `--help`, and if so, give them the
    # assistance they so clearly long for
    if "--help" in ARGS
        println(BUILD_HELP)
        return nothing
    end

    # XXX: These are needed as long as we support old-style sources and
    # dependencies.  Raise a warning for now, deprecate in BB 0.3+
    sources = coerce_source.(sources)
    dependencies = coerce_dependency.(dependencies)

    # Do not clobber caller's ARGS
    ARGS = deepcopy(ARGS)

    # This sets whether we should build verbosely or not
    verbose = check_flag!(ARGS, "--verbose")

    # This sets whether we drop into a debug shell on failure or not
    debug = check_flag!(ARGS, "--debug")

    # Are we skipping building and just outputting JSON?
    meta_json, meta_json_file = extract_flag!(ARGS, "--meta-json")

    # This sets whether we are going to deploy our binaries/wrapper code to GitHub releases
    deploy, deploy_repo = extract_flag!(ARGS, "--deploy", "JuliaBinaryWrappers/$(src_name)_jll.jl")
    deploy_bin, deploy_bin_repo = extract_flag!(ARGS, "--deploy-bin", "JuliaBinaryWrappers/$(src_name)_jll.jl")
    deploy_jll, deploy_jll_repo = extract_flag!(ARGS, "--deploy-jll", "JuliaBinaryWrappers/$(src_name)_jll.jl")

    # Resolve deploy settings
    if deploy
        deploy_bin = true
        deploy_jll = true
        deploy_bin_repo = deploy_repo
        deploy_jll_repo = deploy_repo
    elseif deploy_bin # make sure bin repo and jll repo match
        deploy_jll_repo = deploy_bin_repo
    elseif deploy_jll
        deploy_bin_repo = deploy_jll_repo
    elseif deploy_bin && deploy_jll
        if deploy_bin_repo != deploy_jll_repo
            error("Binaries and JLLs must be deployed to the same repositories")
        end
    end

    # This sets whether we are going to register, and if so, which
    register, register_path = extract_flag!(ARGS, "--register", Pkg.depots1())
    if register && !deploy_jll
        error("Cannot register without deploying!")
    end
    if register && deploy_jll_repo == "local"
        error("Cannot register with a local deployment!")
    end

    if deploy_bin || deploy_jll
        code_dir = joinpath(Pkg.devdir(), "$(src_name)_jll")

        # Shove them into `kwargs` so that we are conditionally passing them along
        kwargs = (; kwargs..., code_dir = code_dir)
    end

    # If --meta-json was passed, error out if any confusing options were passed
    meta_json_stream = nothing
    if meta_json
        if deploy || deploy_bin || deploy_jll
            error("Cannot specify --deploy* with --meta-json!")
        end
        if register
            error("Cannot specify --register with --meta-json!")
        end
        if debug
            error("Cannot specify --debug with --meta-json!")
        end

        # Otherwise, check to see if we're spitting it out to stdout or a file:
        if meta_json_file === nothing
            meta_json_stream = stdout
        else
            meta_json_stream = open(meta_json_file, "a")
        end
    end

    # If the user passed in a platform (or a few, comma-separated) on the
    # command-line, use that instead of our default platforms
    if length(ARGS) > 0
        _platform_key_abi(p::AbstractString) = p == "any" ? AnyPlatform() : platform_key_abi(p)
        platforms = _platform_key_abi.(split(ARGS[1], ","))
    end

    # Check to make sure we have the necessary environment stuff
    if deploy_bin || deploy_jll
        # Check to see if we've already got a wrapper package within the Registry,
        # choose a version number that is greater than anything else existent.
        build_version = get_next_wrapper_version(src_name, src_version)
        if verbose
            @info("Building and deploying version $(build_version) to $(deploy_jll_repo)")
        end
        tag = "$(src_name)-v$(build_version)"

        # We need to make sure that the JLL repo at least exists, so that we can deploy binaries to it
        # even if we're not planning to register things to it today.
        if deploy_jll_repo != "local"
            init_jll_package(src_name, code_dir, deploy_jll_repo)
        end
    end

    args = (
        # Source information
        src_name,
        src_version,
        sources,

        # Build script
        script,

        # Platforms to build for
        platforms,

        # Products we're expecting
        products,

        # Dependencies that must be downloaded
        dependencies,
    )
    extra_kwargs = extract_kwargs(kwargs, (:lazy_artifacts, :init_block))

    if meta_json_stream !== nothing
        # If they've asked for the JSON metadata, by all means, give it to them!
        dict = get_meta_json(args...; extra_kwargs...)
        println(meta_json_stream, JSON.json(dict))

        if meta_json_stream !== stdout
            close(meta_json_stream)
        end

        build_output_meta = Dict()
    else
        # Build the given platforms using the given sources
        build_output_meta = autobuild(
            # Controls output product placement, mount directory placement, etc...
            pwd(),

            args...;

            # Flags
            verbose=verbose,
            debug=debug,
            kwargs...,
        )
    end

    if deploy_jll
        if verbose
            @info("Committing and pushing $(src_name)_jll.jl wrapper code version $(build_version)...")
        end

        # For deploy discard build-only dependencies
        # and make sure we get a `Vector{Dependency}`
        dependencies = Dependency[dep for dep in dependencies if !isa(dep, BuildDependency)]

        # The location the binaries will be available from
        bin_path = "https://github.com/$(deploy_jll_repo)/releases/download/$(tag)"
        build_jll_package(src_name, build_version, sources, code_dir, build_output_meta,
                          dependencies, bin_path; verbose=verbose, extra_kwargs...)
        if deploy_jll_repo != "local"
            push_jll_package(src_name, build_version; code_dir=code_dir, deploy_repo=deploy_jll_repo)
        end
        if register
            if verbose
                @info("Registering new wrapper code version $(build_version)...")
            end

            register_jll(src_name, build_version, dependencies;
                            deploy_repo=deploy_jll_repo, code_dir=code_dir)
        end
    end

    if deploy_bin && deploy_bin_repo != "local"
        # Upload the binaries
        if verbose
            @info("Deploying binaries to release $(tag) on $(deploy_bin_repo) via `ghr`...")
        end
        upload_to_github_releases(deploy_bin_repo, tag, joinpath(pwd(), "products"); verbose=verbose)
    end

    return build_output_meta
end

function check_flag!(ARGS, flag)
    flag_present = flag in ARGS
    filter!(x -> x != flag, ARGS)
    return flag_present
end

function extract_flag!(ARGS, flag, val = nothing)
    for f in ARGS
        if f == flag || startswith(f, string(flag, "="))
            # Check if it's just `--flag` or if it's `--flag=foo`
            if f != flag
                val = split(f, '=')[2]
            end

            # Drop this value from our ARGS
            filter!(x -> x != f, ARGS)
            return (true, val)
        end
    end
    return (false, val)
end

"""
    get_compilers_versions(; compilers = [:c])

Return the script string that is used to print the versions of the given `compilers`.
"""
function get_compilers_versions(; compilers = [:c])
    output =
        """
        set -x
        """
    if :c in compilers
        output *=
            """
            cc --version
            c++ --version
            gcc --version
            g++ --version
            clang --version
            clang++ --version
            objc --version
            f77 --version
            gfortran --version
            ld -v
            """
    end
    if :go in compilers
        output *=
            """
            go version
            """
    end
    if :rust in compilers
        output *=
            """
            rustc --version
            rustup --version
            cargo --version
            """
    end
    return output
end

function upload_to_github_releases(repo, tag, path; gh_auth=Wizard.github_auth(;allow_anonymous=false),
                                   attempts::Int = 3, verbose::Bool = false)
    for attempt in 1:attempts
        try
            ghr() do ghr_path
                run(`$ghr_path -u $(dirname(repo)) -r $(basename(repo)) -t $(gh_auth.token) $(tag) $(path)`)
            end
            return
        catch
            if verbose
                @info("`ghr` upload step failed, beginning attempt #$(attempt)...")
            end
        end
    end
    error("Unable to upload $(path) to GitHub repo $(repo) on tag $(tag)")
end

# Julia 1.3- needs a compat shim here
if VERSION < v"1.4-"
    Pkg.Operations.registered_paths(ctx::Pkg.Types.Context, uuid::UUID) = Pkg.Operations.registered_paths(ctx.env, uuid)
end

function get_next_wrapper_version(src_name, src_version)
    # If src_version already has a build_number, just return it immediately
    if src_version.build != ()
        return src_version
    end
    ctx = Pkg.Types.Context()

    # Force-update the registry here, since we may have pushed a new version recently
    update_registry(ctx, devnull)

    # If it does, we need to bump the build number up to the next value
    build_number = 0
    if any(isfile(joinpath(p, "Package.toml")) for p in Pkg.Operations.registered_paths(ctx, jll_uuid("$(src_name)_jll")))
        # Find largest version number that matches ours in the registered paths
        versions = VersionNumber[]
        for path in Pkg.Operations.registered_paths(ctx, jll_uuid("$(src_name)_jll"))
            append!(versions, RegistryTools.Compress.load_versions(joinpath(path, "Versions.toml")))
        end
        versions = filter(v -> (v.major == src_version.major) &&
                            (v.minor == src_version.minor) &&
                            (v.patch == src_version.patch) &&
                            (v.build isa Tuple{<:UInt}), versions)
        # Our build number must be larger than the maximum already present in the registry
        if !isempty(versions)
            build_number = first(maximum(versions).build) + 1
        end
    end

    # Construct build_version (src_version + build_number)
    build_version = VersionNumber(src_version.major, src_version.minor,
                         src_version.patch, src_version.prerelease, (build_number,))
end

function _registered_packages(registry_url::AbstractString)
    tmp_dir = mktempdir()
    atexit(() -> rm(tmp_dir; force = true, recursive = true))
    registry_dir = joinpath(tmp_dir, "REGISTRY")
    LibGit2.clone(registry_url, registry_dir)
    registry = TOML.parsefile(joinpath(registry_dir, "Registry.toml"))
    packages = Vector{String}(undef, 0)
    for p in registry["packages"]
        push!(packages, p[2]["name"])
    end
    rm(tmp_dir; force = true, recursive = true)
    return packages
end

function _package_is_registered(registry_url::AbstractString,
                                package::AbstractString)
    registered_packages = _registered_packages(registry_url)
    return package in registered_packages
end

function register_jll(name, build_version, dependencies;
                      deploy_repo="JuliaBinaryWrappers/$(name)_jll.jl",
                      code_dir=joinpath(Pkg.devdir(), "$(name)_jll"),
                      gh_auth=Wizard.github_auth(;allow_anonymous=false),
                      gh_username=gh_get_json(DEFAULT_API, "/user"; auth=gh_auth)["login"])
    if !Base.isidentifier(name)
        error("Package name \"$(name)\" is not a valid identifier")
    end
    # Calculate tree hash of wrapper code
    wrapper_tree_hash = bytes2hex(Pkg.GitTools.tree_hash(code_dir))

    # Use RegistryTools to push up a new `General` branch with this JLL package registered within it
    # TODO: Update our fork periodically from upstream `General`.
    cache = RegistryTools.RegistryCache(joinpath(Pkg.depots1(), "registries_binarybuilder"))
    registry_url = "https://$(gh_username):$(gh_auth.token)@github.com/JuliaRegistries/General"
    cache.registries[registry_url] = Base.UUID("23338594-aafe-5451-b93e-139f81909106")
    project = Pkg.Types.Project(build_project_dict(name, build_version, dependencies))
    errors = setdiff(RegistryTools.registrator_errors, [:version_less_than_all_existing])
    reg_branch = RegistryTools.register(
        "https://github.com/$(deploy_repo).git",
        project,
        wrapper_tree_hash;
        registry=registry_url,
        cache=cache,
        push=true,
        checks_triggering_error = errors,
    )
    if haskey(reg_branch.metadata, "error")
        @error(reg_branch.metadata["error"])
    else
        upstream_registry_url = "https://github.com/JuliaRegistries/General"
        name_jll = "$(name)_jll"
        if _package_is_registered(upstream_registry_url, name_jll)
            pr_title = "New version: $(name_jll) v$(build_version)"
        else
            pr_title = "New package: $(name_jll) v$(build_version)"
        end
        # Open pull request against JuliaRegistries/General
        params = Dict(
            "base" => "master",
            "head" => "$(reg_branch.branch)",
            "maintainer_can_modify" => true,
            "title" => pr_title,
            "body" => """
            Autogenerated JLL package registration

            * Registering JLL package $(basename(deploy_repo))
            * Repository: https://github.com/$(deploy_repo)
            * Version: v$(build_version)
            """
        )
        create_or_update_pull_request("JuliaRegistries/General", params; auth=gh_auth)
    end
end

function get_meta_json(
                   src_name::AbstractString,
                   src_version::VersionNumber,
                   sources::Vector{<:AbstractSource},
                   script::AbstractString,
                   platforms::Vector,
                   products::Vector{<:Product},
                   dependencies::Vector{<:AbstractDependency};
                   lazy_artifacts::Bool = false,
                   init_block::String = "")

    dict = Dict(
        "name" => src_name,
        "version" => "v$(src_version)",
        "sources" => sources,
        "script" => script,
        "products" => products,
        "dependencies" => dependencies,
        "lazy_artifacts" => lazy_artifacts,
        "init_block" => init_block,
    )
    # Do not write the list of platforms when building only for `AnyPlatform`
    if platforms != [AnyPlatform()]
        dict["platforms"] = triplet.(platforms)
    end
    return dict
end

"""
    autobuild(dir::AbstractString, src_name::AbstractString,
              src_version::VersionNumber, sources::Vector,
              script::AbstractString, platforms::Vector,
              products::Vector, dependencies::Vector;
              verbose = false, debug = false,
              skip_audit = false, ignore_audit_errors = true,
              autofix = true, code_dir = nothing,
              meta_json_file = nothing, require_license = true, kwargs...)

Runs the boiler plate code to download, build, and package a source package
for a list of platforms.  This method takes a veritable truckload of arguments,
here are the relevant actors, broken down in brief:

* `dir`: the root of the build; products will be placed within `dir`/products,
   and mountpoints will be placed within `dir`/build/.

* `src_name`: the name of the source package being built and will set the name
   of the built tarballs.

* `src_version`: the version of the source package.

* `platforms`: a list of platforms to build for.

* `sources`: a vector of all sources to download and unpack before building
  begins, as [`AbstractSource`](@ref)s.

* `script`: a string representing a shell script to run as the build.

* `products`: the list of `Product`s which shall be built.

* `dependencies`: a vector of JLL dependency packages as
  [`AbstractDependency`](@ref) that should be installed before building begins.

* `verbose`: Enable verbose mode.  What did you expect?

* `debug`: cause a failed build to drop into an interactive shell so that
   the build can be inspected easily.

* `skip_audit`: disable the typical audit that occurs at the end of a build.

* `ignore_audit_errors`: do not kill a build even if a problem is found.

* `autofix`: give `BinaryBuilder` permission to automatically fix issues it
   finds during audit passes.  Highly recommended.

* `code_dir`: sets where autogenerated JLL packages will be put.

* `require_license` enables a special audit pass that requires licenses to be
   installed by all packages.
"""
function autobuild(dir::AbstractString,
                   src_name::AbstractString,
                   src_version::VersionNumber,
                   sources::Vector{<:AbstractSource},
                   script::AbstractString,
                   platforms::Vector,
                   products::Vector{<:Product},
                   dependencies::Vector{<:AbstractDependency};
                   verbose::Bool = false,
                   debug::Bool = false,
                   skip_audit::Bool = false,
                   ignore_audit_errors::Bool = true,
                   autofix::Bool = true,
                   code_dir::Union{String,Nothing} = nothing,
                   require_license::Bool = true,
                   kwargs...)
    @nospecialize

    # If we're on CI and we're not verbose, schedule a task to output a "." every few seconds
    if (haskey(ENV, "TRAVIS") || haskey(ENV, "CI")) && !verbose
        run_travis_busytask = true
        travis_busytask = @async begin
            # Don't let Travis think we're asleep...
            @info("Brewing a pot of coffee for Travis...")
            while run_travis_busytask
                sleep(4)
                print(".")
            end
        end
    end

    # This is what we'll eventually return
    @info("Building for $(join(triplet.(platforms), ", "))")
    build_output_meta = Dict()

    # Resolve dependencies into PackageSpecs now, ensuring we have UUIDs for all deps
    all_resolved, dependencies = resolve_jlls(dependencies, outs=(verbose ? stdout : devnull))
    if !all_resolved
        error("Invalid dependency specifications!")
    end

    # If the user passed in a src_version with a build number, bail out
    if src_version.build != ()
        error("Will not build with a `src_version` that has a build number already specified!")
    end

    # We must prepare our sources.  Download them, hash them, etc...
    source_files = download_source.(sources; verbose=verbose)

    # Our build products will go into ./products
    out_path = joinpath(dir, "products")
    try mkpath(out_path) catch; end

    for platform in sort(collect(platforms), by = triplet)
        # We build in a platform-specific directory
        build_path = joinpath(dir, "build", triplet(platform))
        mkpath(build_path)

        shards = choose_shards(platform; extract_kwargs(kwargs, (:preferred_gcc_version,:preferred_llvm_version,:bootstrap_list,:compilers))...)
        concrete_platform = get_concrete_platform(platform, shards)

        prefix = setup_workspace(
            build_path,
            source_files;
            verbose=verbose,
        )
        artifact_paths = setup_dependencies(prefix, getpkg.(dependencies), concrete_platform; verbose=verbose)

        # Create a runner to work inside this workspace with the nonce built-in
        ur = preferred_runner()(
            prefix.path;
            cwd = "/workspace/srcdir",
            platform = concrete_platform,
            verbose = verbose,
            workspaces = [
                joinpath(prefix, "metadir") => "/meta",
            ],
            compiler_wrapper_dir = joinpath(prefix, "compiler_wrappers"),
            src_name = src_name,
            shards = shards,
            extract_kwargs(kwargs, (:preferred_gcc_version,:preferred_llvm_version,:compilers,:allow_unsafe_flags,:lock_microarchitecture))...,
        )

        # Set up some bash traps
        trapper_wrapper = """
        # Stop if we hit any errors.
        set -e

        # If we're running as `bash`, then use the `DEBUG` and `ERR` traps
        if [ \$(basename \$0) = "bash" ]; then
            trap "RET=\\\$?; \\
                  trap - DEBUG INT TERM ERR EXIT; \\
                  set +e +x; \\
                  auto_install_license; \\
                  save_env; \\
                  exit \\\$RET" \\
                EXIT

            trap "RET=\\\$?; \\
                  trap - DEBUG INT TERM ERR EXIT; \\
                  set +e +x; \\
                  echo Previous command \\\$! exited with \\\$RET >&2; \\
                  save_env; \\
                  exit \\\$RET" \\
                INT TERM ERR

            # Start saving everything into our history
            trap save_history DEBUG
        else
            # If we're running in `sh` or something like that, we need a
            # slightly slimmer set of traps. :(
            trap "RET=\\\$?; \\
                  echo Previous command exited with \\\$RET >&2; \\
                  set +e +x; \\
                  save_env; \\
                  exit \\\$RET" \\
                EXIT INT TERM
        fi

        $(script)
        """

        dest_prefix = Prefix(joinpath(prefix.path, "destdir"))
        did_succeed = with_logfile(dest_prefix, "$(src_name).log") do io
            # Let's start the presentations with BinaryBuilder.jl
            write(io, "BinaryBuilder.jl version: $(get_bb_version())\n\n")
            # Get the list of compilers...
            compilers = extract_kwargs(kwargs, (:compilers,))
            # ...because we want to log all their versions.  However, we don't
            # want this to be shown in the console, so we first run this without
            # teeing to stdout
            run(ur, `/bin/bash -l -c $(get_compilers_versions(; compilers...))`, io;
                verbose = verbose, tee_stream = devnull)
            # Run the build script
            run(ur, `/bin/bash -l -c $(trapper_wrapper)`, io; verbose=verbose)
        end
        if !did_succeed
            if debug
                @warn("Build failed, launching debug shell")
                run_interactive(ur, `/bin/bash -l -i`)
            end
            msg = "Build for $(src_name) on $(triplet(platform)) did not complete successfully\n"
            error(msg)
        end

        # Run an audit of the prefix to ensure it is properly relocatable
        if !skip_audit
            audit_result = audit(dest_prefix, src_name;
                                 platform=platform, verbose=verbose,
                                 has_csl = any(getname.(dependencies) .== "CompilerSupportLibraries_jll"),
                                 autofix=autofix, require_license=require_license)
            if !audit_result && !ignore_audit_errors
                msg = replace("""
                Audit failed for $(dest_prefix.path).
                Address the errors above to ensure relocatability.
                To override this check, set `ignore_audit_errors = true`.
                """, '\n' => ' ')
                error(strip(msg))
            end
        end

        # Finally, error out if something isn't satisfied
        unsatisfied_so_die = false
        for p in products
            if platform isa AnyPlatform && !(p isa FileProduct)
                # `AnyPlatform` is by design platform-independent, so we allow
                # only `FileProduct`s.
                error("Cannot have $(typeof(p)) for AnyPlatform")
            end
            if !satisfied(p, dest_prefix; verbose=verbose, platform=platform)
                if !verbose
                    # If we never got a chance to see the verbose output, give it here:
                    locate(p, dest_prefix; verbose=true, platform=platform)
                end
                @error("Built $(src_name) but $(variable_name(p)) still unsatisfied:")
                unsatisfied_so_die = true
            end
        end
        if unsatisfied_so_die
            error("Cannot continue with unsatisfied build products!")
        end

        # We also need to capture some info about each product
        products_info = Dict{Product,Any}()
        for p in products
            product_path = locate(p, dest_prefix; platform=platform)
            products_info[p] = Dict("path" => relpath(product_path, dest_prefix.path))
            if p isa LibraryProduct || p isa FrameworkProduct
                products_info[p]["soname"] = something(
                    Auditor.get_soname(product_path),
                    basename(product_path),
                )
            end
        end

        # Unsymlink all the deps from the dest_prefix
        cleanup_dependencies(prefix, artifact_paths)

        # Search for dead links in dest_prefix; raise warnings about them.
        Auditor.warn_deadlinks(dest_prefix.path)

        # Cull empty directories, for neatness' sake, unless auditing is disabled
        if !skip_audit
            for (root, dirs, files) = walkdir(dest_prefix.path; topdown=false)
                # We do readdir() here because `walkdir()` does not do a true in-order traversal
                if isempty(readdir(root))
                    rm(root)
                end
            end
        end

        # Compress log files
        compress_dir(joinpath(dest_prefix.path, "logs"), verbose=verbose)

        # Once we're built up, go ahead and package this dest_prefix out
        tarball_path, tarball_hash, git_hash = package(
            dest_prefix,
            joinpath(out_path, src_name),
            src_version;
            platform=platform,
            verbose=verbose,
            force=true,
        )

        build_output_meta[platform] = (
            tarball_path,
            tarball_hash,
            git_hash,
            products_info,
        )

        # Destroy the workspace, taking care to make sure that we don't run into any
        # permissions errors while we do so.
        prepare_for_deletion(prefix.path)
        rm(prefix.path; recursive=true)

        # If the whole build_path is empty, then remove it too.  If it's not, it's probably
        # because some other build is doing something simultaneously with this target, and we
        # don't want to mess with their stuff.
        if isempty(readdir(build_path))
            rm(build_path; recursive=true)
        end
    end

    if (haskey(ENV, "TRAVIS") || haskey(ENV, "CI")) && !verbose
        run_travis_busytask = false
        wait(travis_busytask)
        println()
    end

    # Return our product hashes
    return build_output_meta
end

function prepare_for_deletion(prefix::String)
    # Temporarily work around walkdir bug with endless symlinks: https://github.com/JuliaLang/julia/pull/35006
    try
        for (root, dirs, files) in walkdir(prefix; follow_symlinks=false)
            for d in dirs
                # Ensure that each directory is writable by by the owning user (should be us)
                path = joinpath(root, d)
                try
                    chmod(path, stat(path).mode | Base.Filesystem.S_IWUSR)
                catch
                end
            end
        end
    catch
    end
end

function download_github_release(download_dir, repo, tag; gh_auth=Wizard.github_auth(), verbose::Bool=false)
    release = gh_get_json(DEFAULT_API, "/repos/$(repo)/releases/tags/$(tag)", auth=gh_auth)
    assets = [a for a in release["assets"] if endswith(a["name"], ".tar.gz")]

    for asset in assets
        if verbose
            @info("Downloading $(asset["name"])")
        end
        download(asset["browser_download_url"], joinpath(download_dir, asset["name"]))
    end
    return assets
end


function init_jll_package(name, code_dir, deploy_repo;
                          gh_auth = Wizard.github_auth(;allow_anonymous=false),
                          gh_username = gh_get_json(DEFAULT_API, "/user"; auth=gh_auth)["login"])
    try
        # This throws if it does not exist
        GitHub.repo(deploy_repo; auth=gh_auth)
    catch e
        # If it doesn't exist, create it.
        # check whether gh_org might be a user, not an organization.
        gh_org = dirname(deploy_repo)
        isorg = GitHub.owner(gh_org; auth=gh_auth).typ == "Organization"
        owner = GitHub.Owner(gh_org, isorg)
        @info("Creating new wrapper code repo at https://github.com/$(deploy_repo)")
        try
            GitHub.create_repo(owner, basename(deploy_repo), Dict("license_template" => "mit", "has_issues" => "false"); auth=gh_auth)
        catch create_e
            # If creation failed, it could be because the repo was created in the meantime.
            # Check for that; if it still doesn't exist, then freak out.  Otherwise, continue on.
            try
                GitHub.repo(deploy_repo; auth=gh_auth)
            catch
                rethrow(create_e)
            end
        end
    end

    if !isdir(code_dir)
        # If it does exist, clone it down:
        @info("Cloning wrapper code repo from https://github.com/$(deploy_repo) into $(code_dir)")
        Wizard.with_gitcreds(gh_username, gh_auth.token) do creds
            LibGit2.clone("https://github.com/$(deploy_repo)", code_dir; credentials=creds)
        end
    else
        # Otherwise, hard-reset to latest master:
        repo = LibGit2.GitRepo(code_dir)
        Wizard.with_gitcreds(gh_username, gh_auth.token) do creds
            LibGit2.fetch(repo; credentials=creds)
        end
        origin_master_oid = LibGit2.GitHash(LibGit2.lookup_branch(repo, "origin/master", true))
        LibGit2.reset!(repo, origin_master_oid, LibGit2.Consts.RESET_HARD)
        if string(LibGit2.head_oid(repo)) != string(origin_master_oid)
            LibGit2.branch!(repo, "master", string(origin_master_oid); force=true)
        end
    end
end

# rebuild_jll_package is not called from anywhere in BinaryBuilder,
# but rather from JuliaPackaging/Yggdrasil/.ci/register_package.jl
function rebuild_jll_package(obj::Dict;
                             download_dir = nothing,
                             upload_prefix = nothing,
                             build_version = nothing,
                             gh_org::String = "JuliaBinaryWrappers",
                             verbose::Bool = false,
                             lazy_artifacts::Bool = false,
                             from_scratch::Bool = true)
    if build_version === nothing
        build_version = BinaryBuilder.get_next_wrapper_version(obj["name"], obj["version"])
    end
    if download_dir === nothing
        download_dir = mktempdir()
        repo = "$(gh_org)/$(name)_jll.jl"
        tag = "$(name)-v$(build_version)"
        download_github_release(download_dir, repo, tag; verbose=verbose)
        upload_prefix = "https://github.com/$(repo)/releases/download/$(tag)"
    elseif upload_prefix === nothing
        error("If download_dir is specified, you must specify upload_prefix as well!")
    end

    return rebuild_jll_package(
        obj["name"],
        build_version,
        obj["sources"],
        obj["platforms"],
        obj["products"],
        obj["dependencies"],
        download_dir,
        upload_prefix;
        verbose=verbose,
        lazy_artifacts = lazy_artifacts,
        init_block = get(obj, "init_block", ""),
        from_scratch = from_scratch,
    )
end

function rebuild_jll_package(name::String, build_version::VersionNumber, sources::Vector,
                             platforms::Vector, products::Vector, dependencies::Vector,
                             download_dir::String, upload_prefix::String;
                             code_dir::String = joinpath(Pkg.devdir(), "$(name)_jll"),
                             verbose::Bool = false, lazy_artifacts::Bool = false,
                             init_block::String = "", from_scratch::Bool = true)
    # We're going to recreate "build_output_meta"
    build_output_meta = Dict()

    # Then generate a JLL package for each platform
    downloaded_files = readdir(download_dir)
    for platform in sort(collect(platforms), by = triplet)
        # Find the corresponding tarball:
        tarball_idx = findfirst([occursin(".$(triplet(platform)).", f) for f in downloaded_files])
        if tarball_idx === nothing
            error("Incomplete JLL release!  Could not find tarball for $(triplet(platform))")
        end
        tarball_path = joinpath(download_dir, downloaded_files[tarball_idx])

        # Begin reconstructing all the information we need
        tarball_hash = open(tarball_path, "r") do io
            bytes2hex(sha256(io))
        end

        # Unpack the tarball into a new location, calculate the git hash and locate() each product;
        mktempdir() do dest_prefix
            unpack(tarball_path, dest_prefix; verbose=verbose)

            git_hash = Base.SHA1(Pkg.GitTools.tree_hash(dest_prefix))
            if verbose
                @info("Calculated git tree hash $(bytes2hex(git_hash.bytes)) for $(basename(tarball_path))")
            end

            # Determine locations of each product
            products_info = Dict{Product,Any}()
            for p in products
                product_path = locate(p, Prefix(dest_prefix); platform=platform, verbose=verbose, skip_dlopen=true)
                if product_path === nothing
                    error("Unable to locate $(p) within $(dest_prefix) for $(triplet(platform))")
                end
                products_info[p] = Dict("path" => relpath(product_path, dest_prefix))
                if p isa LibraryProduct || p isa FrameworkProduct
                    products_info[p]["soname"] = something(
                        Auditor.get_soname(product_path),
                        basename(product_path),
                    )
                end
            end

            # Store all this information within build_output_meta:
            build_output_meta[platform] = (
                joinpath(upload_prefix, downloaded_files[tarball_idx]),
                tarball_hash,
                git_hash,
                products_info,
            )
        end

        # If `from_scratch` is set (the default) we clear out any old crusty code
        # before generating our new, pristine, JLL package within it.  :)
        if from_scratch
            rm(joinpath(code_dir, "src"); recursive=true, force=true)
            rm(joinpath(code_dir, "Artifacts.toml"); force=true)
        end

        # Finally, generate the full JLL package
        build_jll_package(name, build_version, sources, code_dir, build_output_meta,
                          dependencies, upload_prefix; verbose=verbose,
                          lazy_artifacts=lazy_artifacts, init_block=init_block)
    end
end

function build_jll_package(src_name::String,
                           build_version::VersionNumber,
                           sources::Vector,
                           code_dir::String,
                           build_output_meta::Dict,
                           dependencies::Vector,
                           bin_path::String;
                           verbose::Bool = false,
                           lazy_artifacts::Bool = false,
                           init_block = "")
    if !Base.isidentifier(src_name)
        error("Package name \"$(src_name)\" is not a valid identifier")
    end
    # Make way, for prince artifacti
    mkpath(joinpath(code_dir, "src", "wrappers"))

    platforms = keys(build_output_meta)
    products_info = Dict{Product,Any}
    for platform in sort(collect(platforms), by = triplet)
        if verbose
            @info("Generating jll package for $(triplet(platform)) in $(code_dir)")
        end

        # Extract this platform's information.  Each of these things can be platform-specific
        # (including the set of products!) so be general here.
        tarball_name, tarball_hash, git_hash, products_info = build_output_meta[platform]

        # Add an Artifacts.toml
        artifacts_toml = joinpath(code_dir, "Artifacts.toml")
        download_info = Tuple[
            (joinpath(bin_path, basename(tarball_name)), tarball_hash),
        ]
        if platform isa AnyPlatform
            # AnyPlatform begs for a platform-independent artifact
            bind_artifact!(artifacts_toml, src_name, git_hash; download_info=download_info, force=true, lazy=lazy_artifacts)
        else
            bind_artifact!(artifacts_toml, src_name, git_hash; platform=platform, download_info=download_info, force=true, lazy=lazy_artifacts)
        end

        # Generate the platform-specific wrapper code
        open(joinpath(code_dir, "src", "wrappers", "$(triplet(platform)).jl"), "w") do io
            println(io, "# Autogenerated wrapper script for $(src_name)_jll for $(triplet(platform))")
            if !isempty(products_info)
                println(io, """
                export $(join(sort(variable_name.(first.(collect(products_info)))), ", "))
                """)
            end
            for dep in dependencies
                println(io, "using $(getname(dep))")
            end

            # The LIBPATH is called different things on different platforms
            if platform isa Windows
                LIBPATH_env = "PATH"
                LIBPATH_default = ""
                pathsep = ';'
            elseif platform isa MacOS
                LIBPATH_env = "DYLD_FALLBACK_LIBRARY_PATH"
                LIBPATH_default = "~/lib:/usr/local/lib:/lib:/usr/lib"
                pathsep = ':'
            else
                LIBPATH_env = "LD_LIBRARY_PATH"
                LIBPATH_default = ""
                pathsep = ':'
            end

            println(io, """
            ## Global variables
            PATH = ""
            LIBPATH = ""
            LIBPATH_env = $(repr(LIBPATH_env))
            LIBPATH_default = $(repr(LIBPATH_default))
            """)

            # Next, begin placing products
            function global_declaration(p::LibraryProduct, p_info::Dict)
                # A library product's public interface is a handle
                return """
                # This will be filled out by __init__()
                $(variable_name(p))_handle = C_NULL

                # This must be `const` so that we can use it with `ccall()`
                const $(variable_name(p)) = $(repr(p_info["soname"]))
                """
            end

            global_declaration(p::FrameworkProduct, p_info::Dict) = global_declaration(p.libraryproduct, p_info)

            function global_declaration(p::ExecutableProduct, p_info::Dict)
                vp = variable_name(p)
                # An executable product's public interface is a do-block wrapper function
                return """
                function $(vp)(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
                    global PATH, LIBPATH
                    env_mapping = Dict{String,String}()
                    if adjust_PATH
                        if !isempty(get(ENV, "PATH", ""))
                            env_mapping["PATH"] = string(PATH, $(repr(pathsep)), ENV["PATH"])
                        else
                            env_mapping["PATH"] = PATH
                        end
                    end
                    if adjust_LIBPATH
                        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
                        if !isempty(LIBPATH_base)
                            env_mapping[LIBPATH_env] = string(LIBPATH, $(repr(pathsep)), LIBPATH_base)
                        else
                            env_mapping[LIBPATH_env] = LIBPATH
                        end
                    end
                    withenv(env_mapping...) do
                        f($(vp)_path)
                    end
                end
                """
            end

            function global_declaration(p::FileProduct, p_info::Dict)
                return """
                # This will be filled out by __init__()
                $(variable_name(p)) = ""
                """
            end

            # Create relative path mappings that are compile-time constant, and mutable
            # mappings that are initialized by __init__() at load time.
            for (p, p_info) in sort(products_info)
                vp = variable_name(p)
                println(io, """
                # Relative path to `$(vp)`
                const $(vp)_splitpath = $(repr(splitpath(p_info["path"])))

                # This will be filled out by __init__() for all products, as it must be done at runtime
                $(vp)_path = ""

                # $(vp)-specific global declaration
                $(global_declaration(p, p_info))
                """)
            end

            print(io, """
            # Inform that the wrapper is available for this platform
            wrapper_available = true

            \"\"\"
            Open all libraries
            \"\"\"
            function __init__()
                # This either calls `@artifact_str()`, or returns a constant string if we're overridden.
                global artifact_dir = find_artifact_dir()

                global PATH_list, LIBPATH_list
            """)

            if !isempty(dependencies)
                # Note: this needs to be done at init time, because the path
                # lists can change after precompile-time if we move the
                # artifacts depot.
                println(io, """
                    # Initialize PATH and LIBPATH environment variable listings
                    # From the list of our dependencies, generate a tuple of all the PATH and LIBPATH lists,
                    # then append them to our own.
                    foreach(p -> append!(PATH_list, p), ($(join(["$(getname(dep)).PATH_list" for dep in dependencies], ", ")),))
                    foreach(p -> append!(LIBPATH_list, p), ($(join(["$(getname(dep)).LIBPATH_list" for dep in dependencies], ", ")),))
                """)
            end

            for (p, p_info) in sort(products_info)
                vp = variable_name(p)

                # Initialize $(vp)_path
                println(io, """
                    global $(vp)_path = normpath(joinpath(artifact_dir, $(vp)_splitpath...))
                """)

                # If `p` is a `LibraryProduct`, dlopen() it right now!
                if p isa LibraryProduct || p isa FrameworkProduct
                    println(io, """
                        # Manually `dlopen()` this right now so that future invocations
                        # of `ccall` with its `SONAME` will find this path immediately.
                        global $(vp)_handle = dlopen($(vp)_path, $(BinaryBuilderBase.dlopen_flags_str(p)))
                        push!(LIBPATH_list, dirname($(vp)_path))
                    """)
                elseif p isa ExecutableProduct
                    println(io, "    push!(PATH_list, dirname($(vp)_path))")
                elseif p isa FileProduct
                    println(io, "    global $(vp) = $(vp)_path")
                end
            end

            # Libraries shipped by Julia can be found in different directories,
            # depending on the operating system and whether Julia has been built
            # from source or it's a pre-built binary. For all OSes libraries can
            # be found in Base.LIBDIR or Base.LIBDIR/julia, on Windows they are
            # in Sys.BINDIR, so we just add everything.
            init_libpath = "joinpath(Sys.BINDIR, Base.LIBDIR, \"julia\"), joinpath(Sys.BINDIR, Base.LIBDIR)"
            if isa(platform, Windows)
                init_libpath = string("Sys.BINDIR, ", init_libpath)
            end

            print(io, """
                # Filter out duplicate and empty entries in our PATH and LIBPATH entries
                filter!(!isempty, unique!(PATH_list))
                filter!(!isempty, unique!(LIBPATH_list))
                global PATH = join(PATH_list, $(repr(pathsep)))
                global LIBPATH = join(vcat(LIBPATH_list, [$(init_libpath)]), $(repr(pathsep)))

                $(init_block)
            end  # __init__()
            """)
        end
    end

    # Generate target-demuxing main source file.
    jll_jl = """
        module $(src_name)_jll

        if isdefined(Base, :Experimental) && isdefined(Base.Experimental, Symbol("@optlevel"))
            @eval Base.Experimental.@optlevel 0
        end

        if VERSION < v"1.3.0-rc4"
            # We lie a bit in the registry that JLL packages are usable on Julia 1.0-1.2.
            # This is to allow packages that might want to support Julia 1.0 to get the
            # benefits of a JLL package on 1.3 (requiring them to declare a dependence on
            # this JLL package in their Project.toml) but engage in heroic hacks to do
            # something other than actually use a JLL package on 1.0-1.2.  By allowing
            # this package to be installed (but not loaded) on 1.0-1.2, we enable users
            # to avoid splitting their package versions into pre-1.3 and post-1.3 branches
            # if they are willing to engage in the kinds of hoop-jumping they might need
            # to in order to install binaries in a JLL-compatible way on 1.0-1.2. One
            # example of this hoop-jumping being to express a dependency on this JLL
            # package, then import it within a `VERSION >= v"1.3"` conditional, and use
            # the deprecated `build.jl` mechanism to download the binaries through e.g.
            # `BinaryProvider.jl`.  This should work well for the simplest packages, and
            # require greater and greater heroics for more and more complex packages.
            error("Unable to import $(src_name)_jll on Julia versions older than 1.3!")
        end

        using Pkg, Pkg.BinaryPlatforms, Pkg.Artifacts, Libdl
        import Base: UUID

        wrapper_available = false
        \"\"\"
            is_available()

        Return whether the artifact is available for the current platform.
        \"\"\"
        is_available() = wrapper_available

        # We put these inter-JLL-package API values here so that they are always defined, even if there
        # is no underlying wrapper held within this JLL package.
        const PATH_list = String[]
        const LIBPATH_list = String[]

        # We determine, here, at compile-time, whether our JLL package has been dev'ed and overridden
        override_dir = joinpath(dirname(@__DIR__), "override")
        if isdir(override_dir)
            function find_artifact_dir()
                return override_dir
            end
        else
            function find_artifact_dir()
                return artifact"$(src_name)"
            end

            \"\"\"
                dev_jll()
            
            Check this package out to the dev package directory (usually ~/.julia/dev),
            copying the artifact over to a local `override` directory, allowing package
            developers to experiment with a locally-built binary.
            \"\"\"
            function dev_jll()
                # First, `dev` out the package, but don't effect the current project
                mktempdir() do temp_env
                    Pkg.activate(temp_env) do
                        Pkg.develop("$(src_name)_jll")
                    end
                end
                # Create the override directory
                override_dir = joinpath(Pkg.devdir(), "$(src_name)_jll", "override")
                # Copy the current artifact contents into that directory
                if !isdir(override_dir)
                    cp(artifact"$(src_name)", override_dir)
                end
                # Force recompilation of that package, just in case it wasn't dev'ed before
                touch(joinpath(Pkg.devdir(), "$(src_name)_jll", "src", "$(src_name)_jll.jl"))
                @info("$(src_name)_ll dev'ed out to $(joinpath(Pkg.devdir(), "$(src_name)_jll")) with pre-populated override directory")
            end
        end
        """
    if Set(platforms) == Set([AnyPlatform()])
        # We know directly the wrapper we want to include
        jll_jl *= """
            include(joinpath(@__DIR__, "wrappers", "any.jl"))
            """
    else
        jll_jl *= """
            # Load Artifacts.toml file
            artifacts_toml = joinpath(@__DIR__, "..", "Artifacts.toml")

            # Extract all platforms
            artifacts = Pkg.Artifacts.load_artifacts_toml(artifacts_toml; pkg_uuid=$(repr(jll_uuid("$(src_name)_jll"))))
            platforms = [Pkg.Artifacts.unpack_platform(e, $(repr(src_name)), artifacts_toml) for e in artifacts[$(repr(src_name))]]

            # Filter platforms based on what wrappers we've generated on-disk
            filter!(p -> isfile(joinpath(@__DIR__, "wrappers", replace(triplet(p), "arm-" => "armv7l-") * ".jl")), platforms)

            # From the available options, choose the best platform
            best_platform = select_platform(Dict(p => triplet(p) for p in platforms))

            # Silently fail if there's no binaries for this platform
            if best_platform === nothing
                @debug("Unable to load $(src_name); unsupported platform \$(triplet(platform_key_abi()))")
            else
                # Load the appropriate wrapper.  Note that on older Julia versions, we still
                # say "arm-linux-gnueabihf" instead of the more correct "armv7l-linux-gnueabihf",
                # so we manually correct for that here:
                best_platform = replace(best_platform, "arm-" => "armv7l-")
                include(joinpath(@__DIR__, "wrappers", "\$(best_platform).jl"))
            end
            """
    end
    jll_jl *= """

        end  # module $(src_name)_jll
        """


    open(joinpath(code_dir, "src", "$(src_name)_jll.jl"), "w") do io
        print(io, jll_jl)
    end

    is_yggdrasil = get(ENV, "YGGDRASIL", "false") == "true"
    # Use an Azure Pipelines environment variable to get the current commit hash
    ygg_head = is_yggdrasil ? ENV["BUILD_SOURCEVERSION"] : ""
    print_source(io, s::ArchiveSource) = println(io, "* compressed archive: ", s.url, " (SHA256 checksum: `", s.hash,"`)")
    print_source(io, s::GitSource) =     println(io, "* git repository: ", s.url, " (revision: `", s.hash,"`)")
    print_source(io, s::FileSource) =    println(io, "* file: ", s.url, " (SHA256 checksum: `", s.hash,"`)")
    function print_source(io, s::DirectorySource)
        print(io, "* files in directory, relative to originating `build_tarballs.jl`: ")
        if is_yggdrasil
            println(io, "[`", s.path, "`](https://github.com/JuliaPackaging/Yggdrasil/tree/", ygg_head, "/", ENV["PROJECT"], "/", basename(s.path), ")")
        else
            println(io, "`", s.path, "`")
        end
    end
    function print_jll(io, dep)
        depname = getname(dep)
        if is_yggdrasil
            # In this case we can easily add a direct link to the repo
            println(io, "* [`", depname, "`](https://github.com/JuliaBinaryWrappers/", depname, ".jl)")
        else
            println(io, "* `", depname, ")`")
        end
    end
    print_product(io, p::Product) = println(io, "* `", typeof(p), "`: `", variable_name(p), "`")
    # Add a README.md
    open(joinpath(code_dir, "README.md"), "w") do io
        print(io,
              """
              # `$(src_name)_jll.jl` (v$(build_version))

              This is an autogenerated package constructed using [`BinaryBuilder.jl`](https://github.com/JuliaPackaging/BinaryBuilder.jl).""")
        if is_yggdrasil
            print(io, " The originating [`build_tarballs.jl`](https://github.com/JuliaPackaging/Yggdrasil/blob/$(ygg_head)/$(ENV["PROJECT"])/build_tarballs.jl) script can be found on [`Yggdrasil`](https://github.com/JuliaPackaging/Yggdrasil/), the community build tree.  If you have any issue, please report it to the Yggdrasil [bug tracker](https://github.com/JuliaPackaging/Yggdrasil/issues).")
        end
        println(io)
        println(io)
        println(io,"For more details about JLL packages and how to use them, see `BinaryBuilder.jl` [documentation](https://juliapackaging.github.io/BinaryBuilder.jl/dev/jll/).")
        println(io)
        if length(sources) > 0
            # `sources` can be empty, and it is for some HelloWorld examples
            println(io, """
                        ## Sources

                        The tarballs for `$(src_name)_jll.jl` have been built from these sources:""")
            println(io)
            print_source.(Ref(io), sources)
            println(io)
        end
        println(io, """
                    ## Platforms

                    `$(src_name)_jll.jl` is available for the following platforms:
                    """)
        for p in sort(collect(platforms), by = triplet)
            println(io, "* `", p, "` (`", triplet(p), "`)")
        end
        if length(dependencies) > 0
            println(io)
            println(io, """
                        ## Dependencies

                        The following JLL packages are required by `$(src_name)_jll.jl`:""")
            println(io)
            print_jll.(Ref(io), sort(dependencies, by = getname))
        end
        if length(keys(products_info)) > 0
            println(io)
            println(io, """
                        ## Products

                        The code bindings within this package are autogenerated from the following `Products`:
                        """)
            for (p, _) in sort(products_info)
                print_product(io, p)
            end
        end
    end

    # Add before the license a note about to what files this applies
    license = if isfile(joinpath(code_dir, "LICENSE"))
        # In most cases we have a file called `LICENSE`...
        strip(read(joinpath(code_dir, "LICENSE"), String))
    else
        # ...but sometimes this is missing.
        strip("MIT License\n\nCopyright (c) $(year(now()))\n" * PkgLicenses.readlicense("MIT"))
    end
    note_lines = split("""
                       The Julia source code within this repository (all files under `src/`) are
                       released under the terms of the MIT \"Expat\" License, the text of which is
                       included below.  This license does not apply to the binary package wrapped by
                       this Julia package and automatically downloaded by the Julia package manager
                       upon installing this wrapper package.  The binary package's license is shipped
                       alongside the binary itself and can be found within the
                       `share/licenses/$(src_name)` directory within its prefix.""", "\n")
    # Since this function can be called multiple times, we must make sure that
    # the note is written only once.  Do nothing it is already there.
    if !startswith(license, first(note_lines))
        open(joinpath(code_dir, "LICENSE"), "w") do io
            println.(Ref(io), note_lines)
            println(io)
            println(io, license)
        end
    end
    # We used to have a duplicate license file, remove it.
    rm(joinpath(code_dir, "LICENSE.md"); force=true)

    # Add a Project.toml
    project = build_project_dict(src_name, build_version, dependencies)
    open(joinpath(code_dir, "Project.toml"), "w") do io
        Pkg.TOML.print(io, project)
    end

    # Add a `.gitignore`
    open(joinpath(code_dir, ".gitignore"), "w") do io
        println(io, "override/")
    end
end

function push_jll_package(name, build_version;
                          code_dir = joinpath(Pkg.devdir(), "$(name)_jll"),
                          deploy_repo = "JuliaBinaryWrappers/$(name)_jll.jl",
                          gh_auth = Wizard.github_auth(;allow_anonymous=false),
                          gh_username = gh_get_json(DEFAULT_API, "/user"; auth=gh_auth)["login"])
    # Next, push up the wrapper code repository
    wrapper_repo = LibGit2.GitRepo(code_dir)
    LibGit2.add!(wrapper_repo, ".")
    LibGit2.commit(wrapper_repo, "$(name)_jll build $(build_version)")
    Wizard.with_gitcreds(gh_username, gh_auth.token) do creds
        LibGit2.push(
            wrapper_repo;
            refspecs=["refs/heads/master"],
            remoteurl="https://github.com/$(deploy_repo).git",
            credentials=creds,
        )
    end
end

# For historical reasons, our UUIDs are generated with some rather strange constants
function bb_specific_uuid5(namespace::UUID, key::String)
    data = [reinterpret(UInt8, [namespace.value]); codeunits(key)]
    u = reinterpret(UInt128, sha1(data)[1:16])[1]
    u &= 0xffffffffffff0fff3fffffffffffffff
    u |= 0x00000000000050008000000000000000
    return UUID(u)
end
const uuid_package = UUID("cfb74b52-ec16-5bb7-a574-95d9e393895e")
# For even more interesting historical reasons, we append an extra
# "_jll" to the name of the new package before computing its UUID.
jll_uuid(name) = bb_specific_uuid5(uuid_package, "$(name)_jll")
function build_project_dict(name, version, dependencies::Array{Dependency})
    function has_compat_info(d::Dependency)
        r = Pkg.Types.VersionRange()
        return isa(d.pkg.version, VersionNumber) ||
               length(d.pkg.version.ranges) != 1 ||
               d.pkg.version.ranges[1] != r
    end
    function exactly_this_version(v::VersionNumber)
        return string("=", VersionNumber(v.major, v.minor, v.patch))
    end
    function exactly_this_version(v::Pkg.Types.VersionSpec)
        if length(v.ranges) == 1 &&
           v.ranges[1].lower == v.ranges[1].upper
           return string("=", v)
       end
       return string(v)
    end
    exactly_this_version(v) = v
    project = Dict(
        "name" => "$(name)_jll",
        "uuid" => string(jll_uuid("$(name)_jll")),
        "version" => string(version),
        "deps" => Dict{String,Any}(),
        # We require at least Julia 1.3+, for Pkg.Artifacts support, but we only claim
        # Julia 1.0+ so that empty JLLs can be installed on older versions.
        "compat" => Dict{String,Any}("julia" => "1.0")
    )
    for dep in dependencies
        depname = getname(dep)
        project["deps"][depname] = string(jll_uuid(depname))
        if has_compat_info(dep)
            project["compat"][depname] = string(exactly_this_version(dep.pkg.version))
        end
    end
    # Always add Libdl and Pkg as dependencies
    stdlibs = isdefined(Pkg.Types, :stdlib) ? Pkg.Types.stdlib : Pkg.Types.stdlibs
    project["deps"]["Libdl"] = first([string(u) for (u, n) in stdlibs() if n == "Libdl"])
    project["deps"]["Pkg"] = first([string(u) for (u, n) in stdlibs() if n == "Pkg"])

    return project
end
